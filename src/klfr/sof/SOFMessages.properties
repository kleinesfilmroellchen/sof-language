############### SOF language system message strings: English
### Error types
sof.error.type.generic=Interpreter
sof.error.type.syntax=Syntax
sof.error.type.call=Call
sof.error.type.type=Type
sof.error.type.stackaccess=StackAccess
sof.error.type.arithmetic=Arithmetic
sof.error.type.name=Name
sof.error.type.assert=Assert
sof.error.type.native=Native
sof.error.type.module=Module
### Error messages
## Generals
sof.error.message.generic=Unknown error. We think this is a problem, consider filing a bug report.
sof.error.message.syntax=Syntax error, we found unexpected character(s).
sof.error.message.call=An error occurred while calling.
sof.error.message.type=The types here are not correct.
sof.error.message.stackaccess=This code is illegally accessing the stack.
sof.error.message.stack=The stack is empty.
sof.error.message.arithmetic=This operation is mathematically invalid.
sof.error.message.assert=The assertion here failed. The asserted value was falsy.
## Specifics
sof.error.message.dupnametable=We cannot duplicate a nametable.
sof.error.message.div-by-zero=Division by zero.
sof.error.message.mod-by-zero=Modulus by zero.
## all syntax errors: format token (s)
sof.error.message.syntax.boolean=We found an invalid Boolean literal "%s".
sof.error.message.syntax.float=We found an invalid Float literal "%s".
sof.error.message.syntax.integer=We found an invalid Integer literal "%s".
sof.error.message.syntax.identifier="%s" is not a valid identifier.
sof.error.message.syntax.string="%s" is not a valid String literal.
sof.error.message.syntax.string.unclosed=There is an unclosed String literal here.
# format digit (c), base (d)
sof.error.message.syntax.integer.base=The character "%c" is not allowed in base %d integer literal.
sof.error.message.syntax.codeblock=There is an unclosed code block here.
# format first return value (#s)
sof.error.message.doublecall.first-non-callable=We cannot complete the double-call operator ":" because the first call returned a non-Callable `%#s´.
sof.error.message.doublecall.first-null=We cannot complete the double-call operator ":" : because the first call didn''t return anything.
# format value (#s), type (s)
sof.error.message.type.checkfail=We cannot execute this operation because `%#s´ is not of the %s type.
## all type errors: format first type (s), second type (s)
sof.error.message.type.equals-incompatible=We cannot check %s and %s for equality.
sof.error.message.type.divide=We cannot divide the types %s and %s.
sof.error.message.type.modulus=We cannot take the modulus of the types %s and %s.
sof.error.message.type.add=We cannot add the types %s and %s.
sof.error.message.type.multiply=We cannot multiply the types %s and %s.
sof.error.message.type.subtract=We cannot subtract the types %s and %s.
sof.error.message.type.bitshift=We cannot bit shift the types %s and %s.
sof.error.message.type.and=We cannot logically and the types %s and %s.
sof.error.message.type.or=We cannot logically or the types %s and %s.
sof.error.message.type.xor=We cannot logically exclusive or (xor) the types %s and %s.
sof.error.message.type.not=We cannot logically negate type %s.
sof.error.message.type.compare=We cannot compare the types %s and %s.
sof.error.message.type.call=We cannot call type %s.
sof.error.message.native=An error occurred in a native call. This is often caused by incorrect argument types.
sof.error.message.native.index=Incorrect index %d for list of length %d.
sof.error.message.native.unknown=We could not find the native function '%s'. Maybe you forgot to register a native function collection?
# format identifier (#s)
sof.error.message.name=We cannot find a value for the name `%#s´.
sof.error.message.module=We cannot find the module %s.
### Interpreter messages
# use the unicode escape for space to circumvent whitespace deletion
sof.cli.help=\
     sof - Interpreter for Stack with Objects and       %n\
\u0020     Functions (SOF) Programming Language.        %n\
     usage: sof [-hvdpP] [-l LIBRARY_LOCATION]          %n\
\u0020          [-c COMMAND] FILENAME [...FILENAMES]    %n%n\
     positional arguments:                              %n\
\u0020  filename  Path to a file to be read and         %n\
\u0020            executed. Can be a list of files that %n\
\u0020            are executed in order.                %n%n\
     options:                                           %n\
\u0020  --help, -h                                      %n\
\u0020            Display this help message and exit.   %n\
\u0020  --version, -v%n\
\u0020            Display version information and exit. %n\
\u0020  --library, -l LIBRARY_LOCATION                  %n\
\u0020            Set the location of the standard      %n\
\u0020            library. By default, this is ''lib''  %n\
\u0020            relative to the executable.           %n\
\u0020  -d        Execute in debug mode. Read the manual%n\
\u0020            for more information.                 %n\
\u0020  -p        Run the preprocessor and exit.        %n\
\u0020  -P        Do not run the preprocessor before    %n\
\u0020            executing the input file(s).          %n\
\u0020  --command, -c COMMAND                           %n\
\u0020            Execute COMMAND and exit.             %n\
\u0020  --performance                                   %n\
\u0020            Run performance tests and show results%n%n\
     When used without execution-starting arguments (-c %n\
     or filename), sof is started in interactive mode.  %n%n\
     Quit the program with ^C.                          %n%n
sof.cli.version=sof version %s (built %s)
sof.cli.license=This program is licensed under GNU General Public License 3.0.%nSee the project LICENSE for details.%n
sof.cli.filenotfound=error: file %s not found, check access restrictions.%n
sof.cli.nopreamble=error: preamble file missing, check the preamble.sof in klfr/sof/lib.
sof.debug.stack=Stack: 
sof.debug.gnt=Global Nametable: 
### Miscellaneous
sof.error.type.assert=assert
sof.misc.stopiteration=Iteration failed because we encountered a compiler exception.

# The SOF programming language interpreter.
# Copyright (C) 2019-2020  kleinesfilmröllchen

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
