# SOF test file - list tests

[ 2 3 55 ]

[ 89 "string" blah ]

/= assert

[ 2 3 4 ] [ 2 3 4 ] = assert

[ 1 2 3 4 ] sequence def

0 sequence . idx ; 1 = assert
1 sequence . idx ; 2 = assert
2 sequence . idx ; 3 = assert
3 sequence . idx ; 4 = assert

length ; 4 = assert

# todo: should just live in the standard library list.sof
{
	swap filterFunc def

	0 currentIndex def

	[ ] swap
	# ( -- newlist list )
	{
		# ( newlist list -- newlist list element element )
		currentIndex . swap idx ; dup
		{
			# ( newlist list element -- list newlist newlist+element )
			rot push ;
			# ( -- newlist list )
			swap pop swap
		}
		swap filterFunc : 
		{ pop }
		ifelse
		currentIndex 1 +
	}
	{ length ; currentIndex . > } while
	
	pop return
} 2 function filter def

{ } [ false true false true true ] filter :

[ true true true ] = assert

[
	1 2 3 4 5 6 7 8 9 10

	0 rep def
	{ 7 8 3 4 5 6 7 8 9 10 }
	{ rep 1 + rep . 10000 < } while
]

{ 3 < } swap filter :

[ 1 2 ] =  assert

100000 repetitions def
0 i def

# {
# 	sequence .
# 	0 swap idx ; 1 = assert
# 	1 swap idx ; 2 = assert
# 	2 swap idx ; 3 = assert
# 	3 swap idx ; 4 = assert

# 	length ; 4 = assert
# }
# 	{
# 		i . 1 + dup i def
# 		repetitions . <
# 	} while

